#ifndef __MSSB_TYPES_H_
#define __MSSB_TYPES_H_

#include "types.h"

// Enum macro to help debug types
#define E(storage, enumType) storage

typedef enum _CHAR_ID {
    CHAR_ID_NONE = -1,
    CHAR_ID_MARIO,            // 0  0x00
    CHAR_ID_LUIGI,            // 1  0x01
    CHAR_ID_DK,               // 2  0x02
    CHAR_ID_DIDDY,            // 3  0x03
    CHAR_ID_PEACH,            // 4  0x04
    CHAR_ID_DAISY,            // 5  0x05
    CHAR_ID_YOSHI,            // 6  0x06
    CHAR_ID_BABYMARIO,        // 7  0x07
    CHAR_ID_BABYLUIGI,        // 8  0x08
    CHAR_ID_BOWSER,           // 9  0x09
    CHAR_ID_WARIO,            // 10 0x0A
    CHAR_ID_WALUIGI,          // 11 0x0B
    CHAR_ID_KOOPA_GREEN,      // 12 0x0C
    CHAR_ID_TOAD_RED,         // 13 0x0D
    CHAR_ID_BOO,              // 14 0x0E
    CHAR_ID_TOADETTE,         // 15 0x0F
    CHAR_ID_SHYGUY_RED,       // 16 0x10
    CHAR_ID_BIRDO,            // 17 0x11
    CHAR_ID_MONTY,            // 18 0x12
    CHAR_ID_BOWSERJR,         // 19 0x13
    CHAR_ID_PARATROOPA_RED,   // 20 0x14
    CHAR_ID_PIANTA_BLUE,      // 21 0x15
    CHAR_ID_PIANTA_RED,       // 22 0x16
    CHAR_ID_PIANTA_YELLOW,    // 23 0x17
    CHAR_ID_NOKI_BLUE,        // 24 0x18
    CHAR_ID_NOKI_RED,         // 25 0x19
    CHAR_ID_NOKI_GREEN,       // 26 0x1A
    CHAR_ID_BRO_HAMMER,       // 27 0x1B
    CHAR_ID_TOADSWORTH,       // 28 0x1C
    CHAR_ID_TOAD_BLUE,        // 29 0x1D
    CHAR_ID_TOAD_YELLOW,      // 30 0x1E
    CHAR_ID_TOAD_GREEN,       // 31 0x1F
    CHAR_ID_TOAD_PURPLE,      // 32 0x20
    CHAR_ID_MAGIKOOPA_BLUE,   // 33 0x21
    CHAR_ID_MAGIKOOPA_RED,    // 34 0x22
    CHAR_ID_MAGIKOOPA_GREEN,  // 35 0x23
    CHAR_ID_MAGIKOOPA_YELLOW, // 36 0x24
    CHAR_ID_KINGBOO,          // 37 0x25
    CHAR_ID_PETEY,            // 38 0x26
    CHAR_ID_DIXIE,            // 39 0x27
    CHAR_ID_GOOMBA,           // 40 0x28
    CHAR_ID_PARAGOOMBA,       // 41 0x29
    CHAR_ID_KOOPA_RED,        // 42 0x2A
    CHAR_ID_PARATROOPA_GREEN, // 43 0x2B
    CHAR_ID_SHYGUY_BLUE,      // 44 0x2C
    CHAR_ID_SHYGUY_YELLOW,    // 45 0x2D
    CHAR_ID_SHYGUY_GREEN,     // 46 0x2E
    CHAR_ID_SHYGUY_BLACK,     // 47 0x2F
    CHAR_ID_DRYBONES_GRAY,    // 48 0x30
    CHAR_ID_DRYBONES_GREEN,   // 49 0x31
    CHAR_ID_DRYBONES_RED,     // 50 0x32
    CHAR_ID_DRYBONES_BLUE,    // 51 0x33
    CHAR_ID_BRO_FIRE,         // 52 0x34
    CHAR_ID_BRO_BOOMERANG,    // 53 0x35
    NUM_CHOOSABLE_CHARACTERS,
    CHAR_ID_MAX = NUM_CHOOSABLE_CHARACTERS - 1,
    CHAR_ID_MIN = CHAR_ID_NONE + 1
} CHAR_ID;

typedef enum _BATTING_HAND {
    BATTING_HAND_RIGHT,
    BATTING_HAND_LEFT,
} BATTING_HAND;

typedef enum _REGULAR_STAR_SWING {
    REGULAR_STAR_SWING_NONE,
    REGULAR_STAR_SWING_POPFLY,
    REGULAR_STAR_SWING_GROUNDER,
    REGULAR_STAR_SWING_LINEDRIVE,
} REGULAR_STAR_SWING;

typedef enum _CHARACTER_CLASS {
    CHARACTER_CLASS_BALANCED,
    CHARACTER_CLASS_POWER,
    CHARACTER_CLASS_SPEED,
    CHARACTER_CLASS_TECHNIQUE,
} CHARACTER_CLASS;

typedef enum _BAT_CONTACT_TYPE {
    BAT_CONTACT_TYPE_SLAP,
    BAT_CONTACT_TYPE_CHARGE,
    BAT_CONTACT_TYPE_STAR,
    BAT_CONTACT_TYPE_BUNT,
} BAT_CONTACT_TYPE;

typedef enum _HIT_CONTACT_TYPE {
    HIT_CONTACT_TYPE_NONE = -1,
    HIT_CONTACT_TYPE_RIGHT_SOUR,
    HIT_CONTACT_TYPE_RIGHT_NICE,
    HIT_CONTACT_TYPE_PERFECT,
    HIT_CONTACT_TYPE_LEFT_NICE,
    HIT_CONTACT_TYPE_LEFT_SOUR,
} HIT_CONTACT_TYPE;

typedef enum _HIT_TYPE {
    HIT_TYPE_SLAP_NONE = -1,
    HIT_TYPE_SLAP_SOUR,
    HIT_TYPE_SLAP_NICE,
    HIT_TYPE_SLAP_PERFECT,

    HIT_TYPE_CHARGE,
    HIT_TYPE_CHARGE_SOUR = HIT_TYPE_CHARGE,
    HIT_TYPE_CHARGE_NICE,
    HIT_TYPE_CHARGE_PERFECT,

    HIT_TYPE_CHANGE_UP,
    HIT_TYPE_CHANGE_UP_SOUR = HIT_TYPE_CHANGE_UP,
    HIT_TYPE_CHANGE_UP_NICE,
    HIT_TYPE_CHANGE_UP_PERFECT,

    HIT_TYPE_CHANGE_UP_CHARGE,
    HIT_TYPE_CHANGE_UP_CHARGE_SOUR = HIT_TYPE_CHANGE_UP_CHARGE,
    HIT_TYPE_CHANGE_UP_CHARGE_NICE,
    HIT_TYPE_CHANGE_UP_CHARGE_PERFECT,

    HIT_TYPE_PERFECT_PITCH,
    HIT_TYPE_PERFECT_PITCH_SOUR = HIT_TYPE_PERFECT_PITCH,
    HIT_TYPE_PERFECT_PITCH_NICE,
    HIT_TYPE_PERFECT_PITCH_PERFECT,

    HIT_TYPE_PERFECT_PITCH_CHARGE,
    HIT_TYPE_PERFECT_PITCH_CHARGE_SOUR = HIT_TYPE_PERFECT_PITCH_CHARGE,
    HIT_TYPE_PERFECT_PITCH_CHARGE_NICE,
    HIT_TYPE_PERFECT_PITCH_CHARGE_PERFECT,
} HIT_TYPE;

typedef enum _BUNT_STATUS {
    BUNT_STATUS_NONE,
    BUNT_STATUS_STARTING,
    BUNT_STATUS_SHOWING,
    BUNT_STATUS_STRIKE,
    BUNT_STATUS_LATE,
    BUNT_STATUS_RETREATING,
    BUNT_STATUS_6,
    BUNT_STATUS_7,
} BUNT_STATUS;

typedef enum _HIT_TRAJECTORY {
    HIT_TRAJECTORY_0,     // no hit
    HIT_TRAJECTORY_2 = 2, // grounder
    HIT_TRAJECTORY_3,     // line drive
    HIT_TRAJECTORY_4,     // fly ball?/bOD_notVeryFoul
    HIT_TRAJECTORY_5,     // bunt
    HIT_TRAJECTORY_6,     // fair bund? bOD bunt / bB bunt
} HIT_TRAJECTORY;

typedef enum _DID_SWING_TYPE {
    DID_SWING_TYPE_NONE,
    DID_SWING_TYPE_SWING,
    DID_SWING_TYPE_BUNT,
} DID_SWING_TYPE;

typedef enum _CHARGE_SWING_STAGE {
    CHARGE_SWING_STAGE_NONE,
    CHARGE_SWING_STAGE_CHARGEUP,
    CHARGE_SWING_STAGE_SWING,
    CHARGE_SWING_STAGE_RELEASE,
} CHARGE_SWING_STAGE;

typedef enum _CAPTAIN_STAR_TYPE {
    CAPTAIN_STAR_TYPE_NONE,
    CAPTAIN_STAR_TYPE_MARIO,
    CAPTAIN_STAR_TYPE_LUIGI,
    CAPTAIN_STAR_TYPE_WARIO,
    CAPTAIN_STAR_TYPE_WALUIGI,
    CAPTAIN_STAR_TYPE_DK,
    CAPTAIN_STAR_TYPE_DIDDY,
    CAPTAIN_STAR_TYPE_BOWSER,
    CAPTAIN_STAR_TYPE_BOWSERJR,
    CAPTAIN_STAR_TYPE_YOSHI,
    CAPTAIN_STAR_TYPE_BIRDO,
    CAPTAIN_STAR_TYPE_PEACH,
    CAPTAIN_STAR_TYPE_DAISY,
} CAPTAIN_STAR_TYPE;

typedef enum _STICK_SIDEWAYS_INPUT {
    STICK_SIDEWAYS_INPUT_NONE,
    STICK_SIDEWAYS_INPUT_TOWARDS,
    STICK_SIDEWAYS_INPUT_AWAY,
} STICK_SIDEWAYS_INPUT;

typedef enum _BALL_HITTABLE {
    BALL_HITTABLE_IN_AIR,
    BALL_HITTABLE_HITTABLE,
    BALL_HITTABLE_UNHITTABLE,
} BALL_HITTABLE;

typedef enum _FORCE_OUT_TYPE {
    FORCE_OUT_TYPE_NOT_FORCED_TO_ADVANCE,
    FORCE_OUT_TYPE_FORCED_TO_ADVANCE,
    FORCE_OUT_TYPE_OUT_ON_FORCE,
} FORCE_OUT_TYPE;

typedef enum _RUNNER_STATUS {
    RUNNER_STATUS_NONE,
    RUNNER_STATUS_ON_FIELD,
    RUNNER_STATUS_OUT_DURING_PLAY,
    RUNNER_STATUS_SCORED_DURING_PLAY,
    RUNNER_STATUS_SCORED_DEAD_BALL, // (walkoff or other)/batterWhilePickoff
    RUNNER_STATUS_WALK_WHILE_STEALING,
} RUNNER_STATUS;

typedef enum _TAG_UP_TYPE { TAG_UP_TYPE_NONE, TAG_UP_TYPE_IN_AIR, TAG_UP_TYPE_TAGGED } TAG_UP_TYPE;

typedef enum _PREVENT_PASSING_TYPE {
    PREVENT_PASSING_TYPE_NONE = 0,
    PREVENT_PASSING_TYPE_PREVENT_FORWARD = 1,
    PREVENT_PASSING_TYPE_PREVENT_BACKWARD = 2,
    PREVENT_PASSING_TYPE_PREVENT_CROSSINGPLATE = 4,
    PREVENT_PASSING_TYPE_TAG_UP = 8, // unsure
} PREVENT_PASSING_TYPE;

typedef enum _BALL_RESULT_TYPE {
    BALL_RESULT_TYPE_FOUL = -1,
    BALL_RESULT_TYPE_IN_AIR,
    BALL_RESULT_TYPE_LANDED,
    BALL_RESULT_TYPE_FIELDED,
    BALL_RESULT_TYPE_CAUGHT
} BALL_RESULT_TYPE;

typedef s16 frame_t;
typedef s16 sAng;

#ifndef __cplusplus
typedef u8 bool;
#define true 1
#define false 0
#endif

#endif // !__MSSB_TYPES_H_
